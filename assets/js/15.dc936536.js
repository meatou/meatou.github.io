(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{171:function(s,t,a){"use strict";a.r(t);var n=a(20),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量","aria-hidden":"true"}},[s._v("#")]),s._v(" 变量")]),s._v(" "),a("blockquote",[a("p",[s._v("所谓的变量就是一个拥有指定名称和类型的数据存储位置。")])]),s._v(" "),a("p",[s._v("示例：标准写法")]),s._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("// 语法：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 变量名 数据类型 "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 变量值\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 例子：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x "),a("span",{attrs:{class:"token builtin"}},[s._v("string")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"hello world"')]),s._v("\n")])])]),a("p",[s._v("示例：先定义变量，再赋值")]),s._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("// 语法：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 变量名 数据类型\n变量名 "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 变量值\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 例子：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x "),a("span",{attrs:{class:"token builtin"}},[s._v("string")]),s._v(" \nx "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"hello world"')]),s._v("\n")])])]),a("p",[s._v("示例：Go语言推断变量的类型")]),s._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("// 语法：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" 变量名 "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 变量值\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 例子：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"hello world"')]),s._v("\n")])])]),a("p",[s._v("示例：变量定义的快捷方式")]),s._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("// 语法：")]),s._v("\n变量名 "),a("span",{attrs:{class:"token operator"}},[s._v(":=")]),s._v(" 变量值\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 例子：")]),s._v("\nx "),a("span",{attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"hello world"')]),s._v("\n")])])]),a("div",{staticClass:"danger custom-block"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("p",[s._v("上面这种使用"),a("code",[s._v(":=")]),s._v("方式定义变量的方式只能用在"),a("code",[s._v("函数内部")]),s._v("。")])]),s._v(" "),a("blockquote",[a("p",[s._v("提示")]),s._v(" "),a("blockquote",[a("p",[s._v("变量之所以称为变量，就是因为它们的值在程序运行过程中可以发生变化，但是它们的变量类型是无法改变的。因为Go语言是静态语言，并不支持程序运行过程中变量类型发生变化。比如如果你强行将一个字符串值赋值给定义为int的变量，那么会发生编译错误。即使是强制类型转换也是不可以的。强制类型转换只支持同类的变量类型。比如数值类型之间强制转换。")])])]),s._v(" "),a("blockquote",[a("p",[s._v("变量命名规则")]),s._v(" "),a("blockquote",[a("p",[s._v("Go的变量名称必须以字母或下划线（ _ ）开头，后面可以跟字母，数字，或者下划线( _ )。除此之外，Go语言并不关心你如何定义变量。我们通用的做法是定义一个用户友好的变量。假设你需要定义一个狗狗的年龄，那么使用dog_age作为变量名称要好于用x来定义变量。")])])]),s._v(" "),a("blockquote",[a("p",[s._v("变量作用域")]),s._v(" "),a("blockquote",[a("p",[s._v("所谓作用域就是可以有效访问变量的区域。比如很简单的，你不可能在一个函数func_a里面访问另一个函数func_b里面定义的局部变量x。所以变量的作用域目前分为两类，一个是全局变量，另一个是局部变量。")])])]),s._v(" "),a("h2",{attrs:{id:"常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量","aria-hidden":"true"}},[s._v("#")]),s._v(" 常量")]),s._v(" "),a("blockquote",[a("p",[s._v("所谓常量就是在程序运行过程中保持值不变的变量定义。常量的定义和变量类似，只是用const关键字替换了var关键字，另外常量在定义的时候必须有初始值。")])]),s._v(" "),a("h3",{attrs:{id:"定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义","aria-hidden":"true"}},[s._v("#")]),s._v(" 定义")]),s._v(" "),a("p",[s._v("示例：标准写法")]),s._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("// 语法：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("const")]),s._v(" 常量名 数据类型 "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 常量值\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 例子：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("const")]),s._v(" x "),a("span",{attrs:{class:"token builtin"}},[s._v("string")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"hello world"')]),s._v("\n")])])]),a("p",[s._v("示例：先定义常量，再赋值")]),s._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("// 语法：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("const")]),s._v(" 常量名 数据类型\n常量名 "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 常量值\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 例子：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("const")]),s._v(" x "),a("span",{attrs:{class:"token builtin"}},[s._v("string")]),s._v(" \nx "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"hello world"')]),s._v("\n")])])]),a("p",[s._v("示例：Go语言推断常量的类型")]),s._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("// 语法：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("const")]),s._v(" 常量名 "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 常量值\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 例子：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("const")]),s._v(" x "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v('"hello world"')]),s._v("\n")])])]),a("div",{staticClass:"danger custom-block"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("p",[s._v("变量定义的类型推断方式:=不能够用来定义常量。因为常量的值是在编译的时候就已经确定的，但是变量的值则是运行的时候才使用的。这样常量定义就无法使用变量类型推断的方式了。")]),s._v(" "),a("p",[s._v("常量的值在运行过程中是无法改变的，强制改变常量的值是无效的。")])]),s._v(" "),a("h2",{attrs:{id:"多变量或多常量定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多变量或多常量定义","aria-hidden":"true"}},[s._v("#")]),s._v(" 多变量或多常量定义")]),s._v(" "),a("p",[s._v("示例：多变量定义")]),s._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("// 语法：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    变量名"),a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v(" 数据类型 "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 变量值"),a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v("\n    变量名"),a("span",{attrs:{class:"token number"}},[s._v("2")]),s._v(" 数据类型 "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 变量值"),a("span",{attrs:{class:"token number"}},[s._v("2")]),s._v("\n    变量名"),a("span",{attrs:{class:"token number"}},[s._v("3")]),s._v(" 数据类型 "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 变量值"),a("span",{attrs:{class:"token number"}},[s._v("3")]),s._v("\n    "),a("span",{attrs:{class:"token operator"}},[s._v("...")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 例子：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    a "),a("span",{attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("10")]),s._v("\n    b "),a("span",{attrs:{class:"token builtin"}},[s._v("float64")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("32.45")]),s._v("\n    c "),a("span",{attrs:{class:"token builtin"}},[s._v("bool")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("示例：多常量定义")]),s._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{attrs:{class:"token comment"}},[s._v("// 语法：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    常量名"),a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v(" 数据类型 "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 常量值"),a("span",{attrs:{class:"token number"}},[s._v("1")]),s._v("\n    常量名"),a("span",{attrs:{class:"token number"}},[s._v("2")]),s._v(" 数据类型 "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 常量值"),a("span",{attrs:{class:"token number"}},[s._v("2")]),s._v("\n    常量名"),a("span",{attrs:{class:"token number"}},[s._v("3")]),s._v(" 数据类型 "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" 常量值"),a("span",{attrs:{class:"token number"}},[s._v("3")]),s._v("\n    "),a("span",{attrs:{class:"token operator"}},[s._v("...")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{attrs:{class:"token comment"}},[s._v("// 例子：")]),s._v("\n"),a("span",{attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    Pi "),a("span",{attrs:{class:"token builtin"}},[s._v("float64")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token number"}},[s._v("3.14")]),s._v("\n    True "),a("span",{attrs:{class:"token builtin"}},[s._v("bool")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])])])}],!1,null,null,null);o.options.__file="Variable&Constant.md";t.default=o.exports}}]);